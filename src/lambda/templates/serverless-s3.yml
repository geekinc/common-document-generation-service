# Really excellent example of how to create an S3 bucket with CORS configuration and an IAM role for uploading to the bucket
# The origin of this wisdom is: https://moduscreate.com/blog/upload-files-to-aws-s3-using-a-serverless-framework/

Resources:
  cdgsTemplatesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cdgs-templates
      AccessControl: PublicWrite
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
  UploadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: upload-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  !Sub
                  - "arn:aws:s3:::${BucketName}/*"
                  - {BucketName: !Ref cdgsTemplatesBucket}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub:
                    - arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/*:*:*
                    - { Region: !Ref AWS::Region, AccountId: !Ref AWS::AccountId }
