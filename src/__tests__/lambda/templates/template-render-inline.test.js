import {Context, Event} from "../../../lib/serverless-lib.js";
import { handler as renderInlineHandler } from '../../../lambda/templates/template-render-inline.js';
import * as fs from "fs";
import os from "os";
import {logger} from "../../../lib/logger-lib.js";
import {unixTimestamp} from "../../../lib/utils-lib.js";
process.env.LOG_LEVEL = 'off';

// We don't want to mock the AWS SDK for these tests
// Since we need to store and upload data, we need to use the real AWS SDK (but on the local system)

// jest.mock('aws-sdk', () => {
//     const S3Mocked = {
//         putObject: jest.fn().mockReturnThis(),
//         deleteObject: jest.fn().mockReturnThis(),
//         getObject: jest.fn().mockReturnThis(),
//         promise: jest.fn()
//     };
//     return {
//         S3: jest.fn(() => S3Mocked)
//     };
// });

let templateFileBase64 = '';


/**
 * Happy Path - upload and render a basic template
 */
test('template-render-id - upload and render a basic template', async () => {

    let renderInlineEvent = new Event();
    let renderInlineContext = new Context();
    renderInlineEvent.body = JSON.stringify({
        "data":{
            "firstName": "Ben",
            "lastName": "Inkster",
            "companyName":"JohnInsurance & Co",
            "period":2,
            "sD":1659041229,
            "id":2891,
            "insured":{
                "name":"Jean Michel",
                "street":"23, Sycamore Street",
                "city":"New York",
                "phone":"+33 2 38 99 18 23"
            },
            "showPropertyDamage":false,
            "propertyDamage":[
                {
                    "type":"Fire"
                },
                {
                    "type":"Wind"
                },
                {
                    "type":"Hail"
                },
                {
                    "type":"Water"
                }
            ],
            "options":[
                {
                    "type":"Furniture",
                    "note":"/",
                    "cost":1200
                },
                {
                    "type":"Appliances",
                    "note":"/",
                    "cost":400
                },
                {
                    "type":"Clothing",
                    "note":"/",
                    "cost":300
                },
                {
                    "type":"Dishes",
                    "note":"in some cases",
                    "cost":300
                }
            ],
            "optionsTotalHT":2200,
            "optionsTaxes":10,
            "optionsTotal":2420
        },
        "formatters": "{\"myFormatter\":\"_function_myFormatter|function(data) { return data.slice(1); }\",\"myOtherFormatter\":\"_function_myOtherFormatter|function(data) {return data.slice(2);}\"}",
        "options": {
            "convertTo": "pdf",
            "overwrite": true,
            "reportName": "abc_123_{firstName}_{lastName}"
        },
        "template": {
            "encodingType": "base64",
            "fileType": "odt",
            "content": templateFileBase64
        }

    });
    renderInlineEvent.requestContext = {
        authorizer: {
            claims: {
                username: 'foo'
            }
        }
    };

    // call delete method
    let renderInlineResult = await renderInlineHandler(renderInlineEvent, renderInlineContext);

    // Save file to temporary directory
    try {
        const timestamp = unixTimestamp();
        const tempDir = os.tmpdir();
        const tempFilePath = `${tempDir}/${timestamp}-${renderInlineResult.headers['X-Report-Name']}`;
        await fs.writeFileSync(tempFilePath, renderInlineResult.body, 'base64');
    } catch (err) /* istanbul ignore next */ {
        // await logger.error('template-upload.process_file() - fs.writeFileSync exception with error: ' + err);
        throw new Error(err);
    }

    // Check the response
    expect(renderInlineResult.statusCode).toBe(200);
});
